ggplot(exam_data, aes(x = var)) +
geom_histogram(fill = "blue", color = "black") +
labs(title = paste("Histogram of", var), x = var, y = "Frequency") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10))
ggplot(data = exam_data, aes(x = age ))+
geom_histogram()+ labs(x= 'age of students', y = 'Count')+ theme_bw()
ggplot(exam_data, aes(x = freetime)) +
geom_bar(fill = "green", color = "black") +
theme_minimal() +
labs(title = " Free Time After School", x = "Free Time", y = "Count")
ibrary(ggplot2)
library(ggplot2)
ggplot(exam_data, aes(x = G1.Port)) +
geom_histogram(binwidth = 1, fill = "pink", color = "black") +
theme_minimal() +
labs(title = "First Period Grade in Portuguese", x = "G1.Port", y = "Count")
ggplot(exam_data, aes(x = schoolsup, y = G1.Port, fill = schoolsup)) +
geom_boxplot() +
theme_minimal() +
labs(title = "G1.Port by School Support", x = "School Support", y = "G1.Port")
library(ggplot2)
ggplot(exam_data, aes(x = G1.Port)) +
geom_histogram(binwidth = 50, fill = "pink", color = "black") +
theme_minimal() +
labs(title = "First Period Grade in Portuguese", x = "G1.Port", y = "Count")
library(ggplot2)
ggplot(exam_data, aes(x = G1.Port)) +
geom_histogram(binwidth = 5, fill = "pink", color = "black") +
theme_minimal() +
labs(title = "First Period Grade in Portuguese", x = "G1.Port", y = "Count")
library(ggplot2)
ggplot(exam_data, aes(x = G1.Port)) +
geom_histogram(binwidth = 2, fill = "pink", color = "black") +
theme_minimal() +
labs(title = "First Period Grade in Portuguese", x = "G1.Port", y = "Count")
library(ggplot2)
ggplot(exam_data, aes(x = G1.Port)) +
geom_histogram(binwidth = 1, fill = "pink", color = "black") +
theme_minimal() +
labs(title = "First Period Grade in Portuguese", x = "G1.Port", y = "Count")
ggplot(exam_data, aes(x = paid.Math)) +
geom_bar(fill = "yellow", color = "black") +
theme_minimal() +
labs(title = "Number of Students with Paid Math Classes", x = "Paid Math Classes", y = "Count")
ggplot(data, aes(x = Dalc)) +
geom_histogram(binwidth = 1, fill = "orange", color = "black") +
theme_minimal() +
labs(title = "Workday Alcohol Consumption", x = "Dalc", y = "Count")
ggplot(exam_data, aes(x = Dalc)) +
geom_histogram(binwidth = 1, fill = "orange", color = "black") +
theme_minimal() +
labs(title = "Workday Alcohol Consumption", x = "Dalc", y = "Count")
ggplot(exam_data, aes(x = freetime)) +
geom_bar(fill = "green", color = "black") +
theme_minimal() +
labs(title = " Free Time After School", x = "Free Time", y = "Count")
library(tidyverse)
library(MASS)
library(nnet)
library(MuMIn)
library(ggplot2)
library(tidyverse)
library(MASS)
library(nnet)
library(MuMIn)
library(ggplot2)
library(tidyverse)
library(MASS)
library(nnet)
library(MuMIn)
library(ggplot2)
exam_data <- read_csv("exam_data.csv")
missing_values <- colSums(is.na(exam_data))
missing_values
lm1 <- lm(exam_data - ., data = lm1)
exam_data <- exam_data %>%
mutate(school = as.factor(school))
exam_data <- exam_data %>%
mutate(school = as.factor(school),
sex = as.factor(sex),
Mjob = as.factor(Mjob),
Fjob = as.factor(Fjob))
library(ggplot2)
ggplot(exam_data, aes(x = G1.Port)) +
geom_histogram(binwidth = 1, fill = "pink", color = "black") +
theme_minimal() +
labs(title = "First Period Grade in Portuguese", x = "G1.Port", y = "Count")
ggplot(exam_data, aes(x = schoolsup, y = G1.Port, fill = schoolsup)) +
geom_boxplot() +
theme_minimal() +
labs(title = "G1.Port by School Support", x = "School Support", y = "G1.Port")
ggplot(exam_data, aes(x = paid.Math)) +
geom_bar(fill = "yellow", color = "black") +
theme_minimal() +
labs(title = "Number of Students with Paid Math Classes", x = "Paid Math Classes", y = "Count")
ggplot(exam_data, aes(x = Dalc)) +
geom_histogram(binwidth = 1, fill = "orange", color = "black") +
theme_minimal() +
labs(title = "Workday Alcohol Consumption", x = "Dalc", y = "Count")
ggplot(exam_data, aes(x = freetime)) +
geom_bar(fill = "green", color = "black") +
theme_minimal() +
labs(title = " Free Time After School", x = "Free Time", y = "Count")
nrow_exam <- nrow(exam_data)
ncol_exam <- ncol(exam_data)
set.seed(1582)
train_indices <- sample(1:nrow_exam, round(0.7 * nrow_exam))
train_data <- exam_data[train_indices, ]
test_data <- exam_data[-train_indices, ]
view(train_data)
view(test_data)
train_data <- train_data[complete.cases(train_data), ]
test_data <- test_data[complete.cases(test_data), ]
par(mfrow = c(1, 1))
for (i in 1:ncol_exam) {
if (is.numeric(train_data[, i])) {
hist(train_data[, i], main = names(train_data)[i], xlab = "")
} else {
barplot(table(train_data[, i]), main = names(train_data)[i])
}
}
exam_lm <- lm(`G1.Port` ~ freetime + schoolsup + `paid.Math` + Dalc, data = train_data)
summary(exam_lm)
predictions <- predict(exam_lm, newdata = test_data)
view(predictions)
accuracy <- sqrt(mean((test_data$G3 - predictions)^2))
print(paste("Root Mean Squared Error (RMSE):", accuracy))
exam_data <- exam_data |>
mutate(catG1 = cut(`G1.Port`, breaks = 3, labels = c("Low", "Medium", "High")))
cat_exam_glm <- multinom(`G1.Port` ~ freetime + schoolsup + `paid.Math` + Dalc, data = train_data)
summary(cat_exam_glm)
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warnings = FALSE)
options(scipen = 999)
library(tidyverse)
library(MASS)
library(nnet)
library(MuMIn)
library(ggplot2)
ggplot(exam_data, aes(x = schoolsup, y = G1.Port, fill = schoolsup)) +
geom_boxplot() +
theme_minimal() +
labs(title = "G1.Port by School Support", x = "School Support", y = "G1.Port")
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warnings = FALSE)
options(scipen = 999)
library(tidyverse)
library(MASS)
library(nnet)
library(MuMIn)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warnings = FALSE)
options(scipen = 999)
library(tidyverse)
library(MASS)
library(nnet)
library(MuMIn)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warnings = FALSE)
library(tidyverse)
library(MASS)
library(nnet)
library(MuMIn)
library(ggplot2)
exam_data <- read_csv("exam_data.csv")
missing_values <- colSums(is.na(exam_data))
missing_values
exam_data <- exam_data %>% dplyr::select(- `...1`)
exam_data <- exam_data %>%
mutate(school = as.factor(school),
sex = as.factor(sex),
Mjob = as.factor(Mjob),
Fjob = as.factor(Fjob))
library(ggplot2)
ggplot(exam_data, aes(x = G1.Port)) +
geom_histogram(binwidth = 1, fill = "pink", color = "black") +
theme_minimal() +
labs(title = "First Period Grade in Portuguese", x = "G1.Port", y = "Count")
ggplot(exam_data, aes(x = schoolsup, y = G1.Port, fill = schoolsup)) +
geom_boxplot() +
theme_minimal() +
labs(title = "G1.Port by School Support", x = "School Support", y = "G1.Port")
ggplot(exam_data, aes(x = paid.Math)) +
geom_bar(fill = "yellow", color = "black") +
theme_minimal() +
labs(title = "Number of Students with Paid Math Classes", x = "Paid Math Classes", y = "Count")
ggplot(exam_data, aes(x = Dalc)) +
geom_histogram(binwidth = 1, fill = "orange", color = "black") +
theme_minimal() +
labs(title = "Workday Alcohol Consumption", x = "Dalc", y = "Count")
ggplot(exam_data, aes(x = freetime)) +
geom_bar(fill = "green", color = "black") +
theme_minimal() +
labs(title = " Free Time After School", x = "Free Time", y = "Count")
nrow_exam <- nrow(exam_data)
ncol_exam <- ncol(exam_data)
set.seed(1582)
train_indices <- sample(1:nrow_exam, round(0.7 * nrow_exam))
train_data <- exam_data[train_indices, ]
test_data <- exam_data[-train_indices, ]
view(train_data)
view(test_data)
train_data <- train_data[complete.cases(train_data), ]
test_data <- test_data[complete.cases(test_data), ]
par(mfrow = c(1, 1))
for (i in 1:ncol_exam) {
if (is.numeric(train_data[, i])) {
hist(train_data[, i], main = names(train_data)[i], xlab = "")
} else {
barplot(table(train_data[, i]), main = names(train_data)[i])
}
}
exam_lm <- lm(`G1.Port` ~ freetime + schoolsup + `paid.Math` + Dalc, data = train_data)
summary(exam_lm)
predictions <- predict(exam_lm, newdata = test_data)
view(predictions)
accuracy <- sqrt(mean((test_data$G3 - predictions)^2))
print(paste("Root Mean Squared Error (RMSE):", accuracy))
{r}
nrow_exam <- nrow(exam_data)
ncol_exam <- ncol(exam_data)
set.seed(1582)
train_indices <- sample(1:nrow_exam, round(0.7 * nrow_exam))
train_data <- exam_data[train_indices, ]
test_data <- exam_data[-train_indices, ]
view(train_data)
view(test_data)
train_data <- train_data[complete.cases(train_data), ]
test_data <- test_data[complete.cases(test_data), ]
par(mfrow = c(1, 1))
for (i in 1:ncol_exam) {
if (is.numeric(train_data[, i])) {
hist(train_data[, i], main = names(train_data)[i], xlab = "")
} else {
barplot(table(train_data[, i]), main = names(train_data)[i])
}
}
exam_lm <- lm(`G1.Port` ~ freetime + schoolsup + `paid.Math` + Dalc, data = train_data)
summary(exam_lm)
predictions <- predict(exam_lm, newdata = test_data)
view(predictions)
accuracy <- sqrt(mean((test_data$G3 - predictions)^2))
print(paste("Root Mean Squared Error (RMSE):", accuracy))
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warnings = FALSE)
library(tidyverse)
library(MASS)
library(nnet)
library(MuMIn)
library(ggplot2)
ggplot(exam_data, aes(x = schoolsup, y = G1.Port, fill = schoolsup)) +
geom_boxplot() +
theme_minimal() +
labs(title = "G1.Port by School Support", x = "School Support", y = "G1.Port")
exam_data <- exam_data |>
mutate(catG1 = cut(`G1.Port`, breaks = 3, labels = c("Low", "Medium", "High")))
cat_exam_glm <- multinom(`G1.Port` ~ freetime + schoolsup + `paid.Math` + Dalc, data = train_data)
summary(cat_exam_glm)
```{r}
exam_lm2 <- lm(`G1.PORT` ~ medu + fedu+ studytime + schoolsup  + absences + activities + famsup + paid.port +paid.math + freetime+ Dalc, data =train_data)
exam_lm2 <- lm(`G1.Port` ~ medu + fedu+ studytime + schoolsup  + absences + activities + famsup + paid.port +paid.math + freetime+ Dalc, data =train_data)
exam_lm2 <- lm(`G1.Port` ~ medu + fedu + studytime + schoolsup  + absences + activities + famsup + paid.port +paid.math + freetime+ Dalc, data =train_data)
exam_lm2 <- lm(`G1.Port` ~ fedu + studytime + schoolsup  + absences + activities + famsup + paid.port +paid.math + freetime+ Dalc, data =train_data)
#| label: data
exam_data <- read_csv("exam_data.csv")
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warnings = FALSE)
library(tidyverse)
library(MASS)
library(nnet)
library(MuMIn)
library(ggplot2)
#| label: data-cleaning
exam_data <- exam_data %>% dplyr::select(- `...1`)
#| label: data-manipulation
exam_data <- exam_data %>%
mutate(school = as.factor(school),
sex = as.factor(sex),
Mjob = as.factor(Mjob),
Fjob = as.factor(Fjob))
nrow_exam <- nrow(exam_data)
ncol_exam <- ncol(exam_data)
set.seed(1582)
train_indices <- sample(1:nrow_exam, round(0.7 * nrow_exam))
train_data <- exam_data[train_indices, ]
test_data <- exam_data[-train_indices, ]
view(train_data)
view(test_data)
train_data <- train_data[complete.cases(train_data), ]
test_data <- test_data[complete.cases(test_data), ]
par(mfrow = c(1, 1))
for (i in 1:ncol_exam) {
if (is.numeric(train_data[, i])) {
hist(train_data[, i], main = names(train_data)[i], xlab = "")
} else {
barplot(table(train_data[, i]), main = names(train_data)[i])
}
}
exam_lm <- lm(`G1.Port` ~ freetime + schoolsup + `paid.Math` + Dalc, data = train_data)
summary(exam_lm)
predictions <- predict(exam_lm, newdata = test_data)
view(predictions)
accuracy <- sqrt(mean((test_data$G3 - predictions)^2))
print(paste("Root Mean Squared Error (RMSE):", accuracy))
exam_lm2 <- lm(`G1.Port` ~ medu + fedu + studytime + schoolsup  + absences + activities + famsup + paid.port +paid.math + freetime+ Dalc, data =train_data)
exam_lm2 <- lm(`G1.Port` ~ Medu + Fedu + studytime + schoolsup  + absences + activities + famsup + paid.port +paid.math + freetime+ Dalc, data =train_data)
exam_lm2 <- lm(`G1.Port` ~ Medu + Fedu + studytime + schoolsup  + internet + activities + famsup + paid.port +paid.math + freetime+ Dalc, data =train_data)
exam_lm2 <- lm(`G1.Port` ~ Medu + Fedu + studytime + schoolsup  + internet + activities + famsup + paid.Port +paid.Math + freetime+ Dalc, data =train_data)
summary(exam_lm2)
predictions <- predict(exam_lm, newdata = test_data)
view(predictions)
accuracy <- sqrt(mean((test_data$G3 - predictions)^2))
print(paste("Root Mean Squared Error (RMSE):", accuracy))
exam_lm2 <- lm(`G1.Port` ~ Medu + Fedu + studytime + schoolsup + sex +famsize + traveltime + Pstatus + romance + goout + internet + activities + famsup + paid.Port +paid.Math + freetime+ Dalc, data =train_data)
exam_lm2 <- lm(`G1.Port` ~ Medu + Fedu + studytime + schoolsup + sex +famsize + traveltime + Pstatus + romanTIC + goout + internet + activities + famsup + paid.Port +paid.Math + freetime+ Dalc, data =train_data)
exam_lm2 <- lm(`G1.Port` ~ Medu + Fedu + studytime + schoolsup + sex + famsize + traveltime + Pstatus + romantic + goout + internet + activities + famsup + paid.Port +paid.Math + freetime+ Dalc, data =train_data)
summary(exam_lm2)
predictions <- predict(exam_lm, newdata = test_data)
view(predictions)
accuracy <- sqrt(mean((test_data$G3 - predictions)^2))
print(paste("Root Mean Squared Error (RMSE):", accuracy))
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warnings = FALSE)
library(tidyverse)
library(MASS)
library(nnet)
library(MuMIn)
library(ggplot2)
ggplot(exam_data, aes(x = sex, y = G1.Port, fill = sex)) +
geom_boxplot() +
theme_minimal() +
labs(title = "G1.Port by Sex", x = "Sex", y = "G1.Port")
ggplot(exam_data, aes(x = schoolsup, y = G1.Port, fill = schoolsup)) +
geom_boxplot() +
theme_minimal() +
labs(title = "G1.Port by School Support", x = "School Support", y = "G1.Port")
ggplot(exam_data, aes(x = school, y = G1.Port, fill = school)) +
geom_boxplot() +
theme_minimal() +
labs(title = "G1.Port by School", x = "School", y = "G1.Port")
ggplot(exam_data, aes(x = address, y = G1.Port, fill = address)) +
geom_boxplot() +
theme_minimal() +
labs(title = "G1.Port by Address", x = "Address", y = "G1.Port")
ggplot(exam_data, aes(x = guardian, y = G1.Port, fill = schoolsup)) +
geom_boxplot() +
theme_minimal() +
labs(title = "G1.Port by School Support", x = "School Support", y = "G1.Port")
ggplot(exam_data, aes(x = freetime)) +
geom_bar(fill = "green", color = "black") +
theme_minimal() +
labs(title = " Free Time After School", x = "Free Time", y = "Count")
exam_data <- exam_data |>
mutate(catG1 = cut(`G1.Port`, breaks = 3, labels = c("Low", "Medium", "High")))
cat_exam_glm <- multinom(`G1.Port` ~ freetime + schoolsup + `paid.Math` + Dalc, data = train_data)
summary(cat_exam_glm)
ggplot(exam_data, aes(x = sex, y = G1.Port, fill = sex)) +
geom_boxplot() +
theme_minimal() +
labs(title = "G1.Port by Sex", x = "Sex", y = "G1.Port")
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warnings = FALSE)
library(tidyverse)
library(MASS)
library(nnet)
library(MuMIn)
library(ggplot2)
#| label: data
exam_data <- read_csv("exam_data.csv")
#| label: missing-values
missing_values <- colSums(is.na(exam_data))
missing_values
#| label: data-cleaning
exam_data <- exam_data %>% dplyr::select(- `...1`)
#| label: data-manipulation
exam_data <- exam_data %>%
mutate(school = as.factor(school),
sex = as.factor(sex),
Mjob = as.factor(Mjob),
Fjob = as.factor(Fjob))
#| label: training-data
nrow_exam <- nrow(exam_data)
ncol_exam <- ncol(exam_data)
set.seed(1582)
train_indices <- sample(1:nrow_exam, round(0.7 * nrow_exam))
train_data <- exam_data[train_indices, ]
test_data <- exam_data[-train_indices, ]
view(train_data)
view(test_data)
train_data <- train_data[complete.cases(train_data), ]
test_data <- test_data[complete.cases(test_data), ]
par(mfrow = c(1, 1))
for (i in 1:ncol_exam) {
if (is.numeric(train_data[, i])) {
hist(train_data[, i], main = names(train_data)[i], xlab = "")
} else {
barplot(table(train_data[, i]), main = names(train_data)[i])
}
}
#| label: data-binning
exam_data <- exam_data |>
mutate(catG1 = cut(`G1.Port`, breaks = 3, labels = c("Low", "Medium", "High")))
ggplot(exam_data, aes(x = sex, y = G1.Port, fill = sex)) +
geom_boxplot() +
theme_minimal() +
labs(title = "G1.Port by Sex", x = "Sex", y = "G1.Port")
ggplot(exam_data, aes(x = schoolsup, y = G1.Port, fill = schoolsup)) +
geom_boxplot() +
theme_minimal() +
labs(title = "G1.Port by School Support", x = "School Support", y = "G1.Port")
ggplot(exam_data, aes(x = address, y = G1.Port, fill = address)) +
geom_boxplot() +
theme_minimal() +
labs(title = "G1.Port by Address", x = "Address", y = "G1.Port")
exam_lm <- lm(`G1.Port` ~ freetime + schoolsup + `paid.Math` + Dalc , data = train_data)
summary(exam_lm)
predictions <- predict(exam_lm, newdata = test_data)
view(predictions)
accuracy <- sqrt(mean((test_data$G1 - predictions)^2))
print(paste("Root Mean Squared Error (RMSE):", accuracy))
exam_lm <- lm(`G1.Port` ~ freetime + schoolsup + `paid.Math` + Dalc , data = train_data)
summary(exam_lm)
predictions <- predict(exam_lm, newdata = test_data)
view(predictions)
accuracy <- sqrt(mean((test_data$G1.Port - predictions)^2))
print(paste("Root Mean Squared Error (RMSE):", accuracy))
exam_lm2 <- lm(`G1.Port` ~ studytime + `paid.Math` + schoolsup + sex + guardian + address  + internet + activities + school + freetime + Dalc, data =train_data)
summary(exam_lm2)
predictions <- predict(exam_lm, newdata = test_data)
view(predictions)
accuracy <- sqrt(mean((test_data$G1.Port - predictions)^2))
print(paste("Root Mean Squared Error (RMSE):", accuracy))
ggplot(exam_data, aes(x=sex, fill = catG1)) +
geom_bar(position = "fill") +
stat_count(geom = "text",
aes(label = paste(round((..count..)/sum(..count..)*100), "%")),
position=position_fill(vjust=0.5), colour="white")
ggplot(exam_data, aes(x=sex, fill = catG1)) +
geom_bar(position = "fill") +
stat_count(geom = "text",
aes(label = paste(round((..count..)/sum(..count..)*100), "%")),
position=position_fill(vjust=0.5), colour="white")
ggplot(exam_data, aes(x=sex, fill = catG1)) +
geom_bar(position = "fill") +
stat_count(geom = "text",
aes(label = paste(round((..count..)/sum(..count..)*100), "%")),
position=position_fill(vjust=0.5), colour="white")
cat_exam_glm <- multinom(`G1.Port` ~ freetime + schoolsup + `paid.Math` + Dalc, data = train_data)
summary(cat_exam_glm)
predictions_lm_final <- predict(exam_lm_final, newdata = test_data)
exam_lm <- lm(`G1.Port` ~ freetime + schoolsup + `paid.Math` + Dalc , data = train_data)
summary(exam_lm)
predictions <- predict(exam_lm, newdata = test_data)
view(predictions)
accuracy <- sqrt(mean((test_data$G1.Port - predictions)^2))
print(paste("Root Mean Squared Error (RMSE):", accuracy))
ggplot(exam_data, aes(x=sex, fill = catG1)) +
geom_bar(position = "fill") +
stat_count(geom = "text",
aes(label = paste(round((..count..)/sum(..count..)*100), "%")),
position=position_fill(vjust=0.5), colour="white")
cat_exam_glm <- multinom(`G1.Port` ~ studytime + schoolsup + sex + guardian + address  + internet + activities + school + freetime + Dalc +freetime + `paid.Math` , data = train_data)
summary(cat_exam_glm)
predictions_lm_final <- predict(exam_lm_final, newdata = test_data)
cat_exam_glm <- multinom(`G1.Port` ~ studytime + schoolsup + sex + guardian + address  + internet + activities + school + freetime + Dalc +freetime + `paid.Math` , data = train_data)
summary(cat_exam_glm)
predictions_lm_final <- predict(cat_exam_glm, newdata = test_data)
#view(predictions)
accuracy_lm_final <- sqrt(mean((test_data$G1.Port - predictions_lm_final)^2))
accuracy_lm_final
predictions_cat_glm <- predict(cat_exam_glm, newdata = test_data, type = "class")
accuracy_glm_final <- sqrt(mean((test_data$G1.Port - predictions_lm_final)^2))
accuracy_glm_final
cat_exam_glm <- multinom(`G1.Port` ~ freetime + schoolsup + `paid.Math` + Dalc, data = train_data)
summary(cat_exam_glm)
predictions_lm_final <- predict(cat_exam_glm, newdata = test_data)
#view(predictions)
accuracy_lm_final <- sqrt(mean((test_data$G1.Port - predictions_lm_final)^2))
accuracy_lm_final
predictions_cat_glm <- predict(cat_exam_glm, newdata = test_data, type = "class")
accuracy_glm_final <- sqrt(mean((test_data$G1.Port - predictions_lm_final)^2))
accuracy_glm_final
cat_exam_glm <- multinom(`G1.Port` ~ freetime + schoolsup + `paid.Math` + Dalc, data = train_data)
summary(cat_exam_glm)
predictions_lm_final <- predict(cat_exam_glm, newdata = test_data)
#view(predictions)
accuracy_lm_final <- sqrt(mean((test_data$G1.Port - predictions_lm_final)^2))
accuracy_lm_final
predictions_cat_glm <- predict(cat_exam_glm, newdata = test_data, type = "class")
accuracy_glm_final <- sqrt(mean((test_data$G1.Port - predictions_lm_final)^2))
accuracy_glm_final
cat_exam_glm <- multinom(`G1.Port` ~ studytime + schoolsup + sex + guardian + address  + internet + activities + school + freetime + Dalc +freetime + `paid.Math` , data = train_data)
summary(cat_exam_glm)
predictions_lm_final <- predict(cat_exam_glm, newdata = test_data)
#view(predictions)
accuracy_lm_final <- sqrt(mean((test_data$G1.Port - predictions_lm_final)^2))
accuracy_lm_final
predictions_cat_glm <- predict(cat_exam_glm, newdata = test_data, type = "class")
accuracy_glm_final <- sqrt(mean((test_data$G1.Port - predictions_lm_final)^2))
accuracy_glm_final
